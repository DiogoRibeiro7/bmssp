{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ssspx","text":"<p>Deterministic single-source shortest paths with an optional BMSSP transform.</p> <p>Explore the tutorials to get started, consult how-to guides for specific tasks, and dive into the API reference for detailed class and function descriptions.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented here.</p>"},{"location":"changelog/#unreleased","title":"Unreleased","text":"<ul> <li>Initial documentation site.</li> </ul>"},{"location":"api/bench/","title":"Bench","text":"<p>Micro-benchmark utilities for the solver.</p> <p>Run this module as a script to benchmark <code>ssspx</code> against a reference implementation across multiple random graphs.</p> <p>Example: <pre><code>python -m ssspx.bench --trials 5 --sizes 1000,5000 2000,10000 --out-csv out.csv\n</code></pre></p> <p>Use <code>--mem</code> to record peak memory usage during solver runs.</p>"},{"location":"api/bench/#ssspx.bench.BenchResult","title":"<code>BenchResult</code>  <code>dataclass</code>","text":"<p>Result of a single benchmarking run.</p>"},{"location":"api/bench/#ssspx.bench.main","title":"<code>main(argv=None)</code>","text":"<p>Run benchmarking trials and optionally record results.</p> <p>Parameters:</p> Name Type Description Default <code>argv</code> <code>List[str] | None</code> <p>Optional argument list for testing.</p> <code>None</code>"},{"location":"api/bench/#ssspx.bench.run_once","title":"<code>run_once(n, m, frontier, use_transform, seed=0, track_mem=False)</code>","text":"<p>Run the solver once and compare against a Dijkstra reference.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of vertices.</p> required <code>m</code> <code>int</code> <p>Number of edges.</p> required <code>frontier</code> <code>str</code> <p>Frontier implementation name (<code>\"heap\"</code> or <code>\"block\"</code>).</p> required <code>use_transform</code> <code>bool</code> <p>Whether to apply the constant-outdegree transform.</p> required <code>seed</code> <code>int</code> <p>Seed for the random graph generator.</p> <code>0</code> <p>Returns:</p> Type Description <code>BenchResult</code> <p>Timing information and maximum absolute distance error.</p>"},{"location":"api/cli/","title":"Cli","text":"<p>Command-line interface for running the solver.</p>"},{"location":"api/cli/#ssspx.cli.main","title":"<code>main(argv=None)</code>","text":"<p>Entry point for the <code>ssspx</code> command-line tool.</p>"},{"location":"api/dijkstra/","title":"Dijkstra","text":"<p>Reference Dijkstra implementation used in tests.</p>"},{"location":"api/dijkstra/#ssspx.dijkstra.dijkstra_reference","title":"<code>dijkstra_reference(G, sources)</code>","text":"<p>Run the standard Dijkstra algorithm.</p> <p>Parameters:</p> Name Type Description Default <code>G</code> <code>Graph</code> <p>Input graph with non-negative edge weights.</p> required <code>sources</code> <code>Iterable[Vertex]</code> <p>Iterable of source vertex identifiers.</p> required <p>Returns:</p> Type Description <code>SSSPResult</code> <p>Distances and predecessors from running Dijkstra.</p>"},{"location":"api/exceptions/","title":"Exceptions","text":"<p>Custom exception types used across :mod:<code>ssspx</code>.</p>"},{"location":"api/exceptions/#ssspx.exceptions.AlgorithmError","title":"<code>AlgorithmError</code>","text":"<p>               Bases: <code>SSSPXError</code>, <code>RuntimeError</code></p> <p>Raised when algorithm invariants are violated at runtime.</p>"},{"location":"api/exceptions/#ssspx.exceptions.ConfigError","title":"<code>ConfigError</code>","text":"<p>               Bases: <code>SSSPXError</code>, <code>ValueError</code></p> <p>Raised for invalid configuration options.</p>"},{"location":"api/exceptions/#ssspx.exceptions.GraphError","title":"<code>GraphError</code>","text":"<p>               Bases: <code>InputError</code></p> <p>Alias of :class:<code>InputError</code> for backward compatibility.</p>"},{"location":"api/exceptions/#ssspx.exceptions.GraphFormatError","title":"<code>GraphFormatError</code>","text":"<p>               Bases: <code>InputError</code></p> <p>Raised when parsing a graph file fails.</p>"},{"location":"api/exceptions/#ssspx.exceptions.InputError","title":"<code>InputError</code>","text":"<p>               Bases: <code>SSSPXError</code>, <code>ValueError</code></p> <p>Raised for invalid user input such as malformed edges.</p>"},{"location":"api/exceptions/#ssspx.exceptions.NotSupportedError","title":"<code>NotSupportedError</code>","text":"<p>               Bases: <code>SSSPXError</code></p> <p>Raised when requesting a feature that is not implemented.</p>"},{"location":"api/exceptions/#ssspx.exceptions.SSSPXError","title":"<code>SSSPXError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base class for all package-specific errors.</p>"},{"location":"api/export/","title":"Export","text":"<p>Export utilities for shortest-path DAGs.</p>"},{"location":"api/export/#ssspx.export.export_dag_graphml","title":"<code>export_dag_graphml(G, distances)</code>","text":"<p>Return a minimal GraphML string for the shortest-path DAG.</p>"},{"location":"api/export/#ssspx.export.export_dag_json","title":"<code>export_dag_json(G, distances)</code>","text":"<p>Return a JSON string with nodes and DAG edges.</p>"},{"location":"api/export/#ssspx.export.shortest_path_dag","title":"<code>shortest_path_dag(G, distances, eps=1e-12)</code>","text":"<p>Return edges of the shortest-path DAG.</p> <p>Parameters:</p> Name Type Description Default <code>G</code> <code>Graph</code> <p>Original graph.</p> required <code>distances</code> <code>List[Float]</code> <p>Distances from the source to each vertex (<code>inf</code> for unreachable vertices).</p> required <code>eps</code> <code>float</code> <p>Numerical tolerance.</p> <code>1e-12</code> <p>Returns:</p> Type Description <code>List[Tuple[int, int]]</code> <p>Edges <code>(u, v)</code> satisfying <code>d[v] == d[u] + w(u, v)</code>.</p>"},{"location":"api/frontier/","title":"Frontier","text":"<p>Frontier data structures used by the solver.</p>"},{"location":"api/frontier/#ssspx.frontier.BlockFrontier","title":"<code>BlockFrontier</code>  <code>dataclass</code>","text":"<p>Block-based frontier approximating the paper's data structure.</p> <p>Parameters:</p> Name Type Description Default <code>M</code> <code>int</code> <p>Maximum keys returned per <code>pull</code>.</p> required <code>B</code> <code>Float</code> <p>Upper bound separator value.</p> required"},{"location":"api/frontier/#ssspx.frontier.BlockFrontier.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Validate parameters and set up internal structures.</p>"},{"location":"api/frontier/#ssspx.frontier.BlockFrontier.batch_prepend","title":"<code>batch_prepend(pairs)</code>","text":"<p>Prepend pairs whose values are all smaller than any current value.</p> <p>The pairs are sorted and chunked into blocks to keep pull locality.</p> <p>Parameters:</p> Name Type Description Default <code>pairs</code> <code>Iterable[Tuple[Vertex, Float]]</code> <p>Iterable of <code>(key, value)</code> tuples to prepend.</p> required"},{"location":"api/frontier/#ssspx.frontier.BlockFrontier.insert","title":"<code>insert(key, value)</code>","text":"<p>Insert or update a key with the given value.</p> <p>Only the smallest value for each key is retained; larger duplicates are ignored.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Vertex</code> <p>Vertex identifier.</p> required <code>value</code> <code>Float</code> <p>Associated value.</p> required"},{"location":"api/frontier/#ssspx.frontier.BlockFrontier.pull","title":"<code>pull()</code>","text":"<p>Return up to <code>M</code> keys with the smallest values and a separator.</p> <p>Returns <code>(S, x)</code> where <code>S</code> is the set of selected keys and <code>x</code> is a value separating the selected keys from the remaining ones.</p> <p>Returns:</p> Type Description <code>Set[Vertex]</code> <p>A tuple <code>(S, x)</code> as described above. If the frontier is empty,</p> <code>Float</code> <p><code>S</code> is empty and <code>x</code> equals <code>B</code>.</p>"},{"location":"api/frontier/#ssspx.frontier.FrontierProtocol","title":"<code>FrontierProtocol</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for frontier structures consumed by the solver.</p>"},{"location":"api/frontier/#ssspx.frontier.FrontierProtocol.batch_prepend","title":"<code>batch_prepend(pairs)</code>","text":"<p>Prepend key/value pairs.</p>"},{"location":"api/frontier/#ssspx.frontier.FrontierProtocol.insert","title":"<code>insert(key, value)</code>","text":"<p>Insert or update a key.</p>"},{"location":"api/frontier/#ssspx.frontier.FrontierProtocol.pull","title":"<code>pull()</code>","text":"<p>Return up to <code>M</code> keys with the smallest values.</p>"},{"location":"api/frontier/#ssspx.frontier.HeapFrontier","title":"<code>HeapFrontier</code>","text":"<p>Simpler frontier based on a binary heap.</p> <p>It matches the :class:<code>FrontierProtocol</code> semantics but is slower than :class:<code>BlockFrontier</code> and mostly useful for profiling or as a baseline.</p>"},{"location":"api/frontier/#ssspx.frontier.HeapFrontier.__init__","title":"<code>__init__(M, B)</code>","text":"<p>Initialize the frontier.</p> <p>Parameters:</p> Name Type Description Default <code>M</code> <code>int</code> <p>Maximum keys returned per <code>pull</code>.</p> required <code>B</code> <code>Float</code> <p>Upper bound separator value.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>M</code> is not positive.</p>"},{"location":"api/frontier/#ssspx.frontier.HeapFrontier.batch_prepend","title":"<code>batch_prepend(pairs)</code>","text":"<p>Insert all given pairs into the frontier.</p>"},{"location":"api/frontier/#ssspx.frontier.HeapFrontier.insert","title":"<code>insert(key, value)</code>","text":"<p>Insert or update a key with the given value.</p>"},{"location":"api/frontier/#ssspx.frontier.HeapFrontier.pull","title":"<code>pull()</code>","text":"<p>Return up to <code>M</code> keys with the smallest values.</p>"},{"location":"api/graph/","title":"Graph","text":"<p>Simple directed graph representation used by the solver.</p>"},{"location":"api/graph/#ssspx.graph.Graph","title":"<code>Graph</code>  <code>dataclass</code>","text":"<p>Directed graph with non-negative edge weights.</p> <p>Negative weights are not supported: attempting to insert an edge with <code>w &lt; 0</code> raises :class:<code>~ssspx.exceptions.GraphFormatError</code> that cites the offending edge.</p> <p>Attributes:</p> Name Type Description <code>n</code> <code>int</code> <p>Number of vertices in the range <code>0</code> .. <code>n-1</code>.</p> <code>adj</code> <code>int</code> <p>Outgoing adjacency lists.</p>"},{"location":"api/graph/#ssspx.graph.Graph.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Validate vertex count and initialize adjacency lists.</p>"},{"location":"api/graph/#ssspx.graph.Graph.add_edge","title":"<code>add_edge(u, v, w)</code>","text":"<p>Add a directed edge from <code>u</code> to <code>v</code>.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Vertex</code> <p>Tail vertex.</p> required <code>v</code> <code>Vertex</code> <p>Head vertex.</p> required <code>w</code> <code>Float</code> <p>Non-negative edge weight.</p> required <p>Raises:</p> Type Description <code>InputError</code> <p>If <code>u</code> or <code>v</code> are out of range.</p> <code>GraphFormatError</code> <p>If <code>w</code> is negative.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; g = Graph(2)\n&gt;&gt;&gt; g.add_edge(0, 1, 1.5)\n&gt;&gt;&gt; g.adj\n[[(1, 1.5)], []]\n</code></pre>"},{"location":"api/graph/#ssspx.graph.Graph.from_edges","title":"<code>from_edges(n, edges)</code>  <code>classmethod</code>","text":"<p>Create a graph from an iterable of edges.</p> <p>Parameters:</p> Name Type Description Default <code>n</code> <code>int</code> <p>Number of vertices.</p> required <code>edges</code> <code>Iterable[Edge]</code> <p>Iterable of <code>(u, v, w)</code> tuples.</p> required <p>Returns:</p> Type Description <code>'Graph'</code> <p>A graph populated with the provided edges.</p>"},{"location":"api/graph/#ssspx.graph.Graph.out_degree","title":"<code>out_degree(u)</code>","text":"<p>Return the out-degree of vertex <code>u</code>.</p> <p>Parameters:</p> Name Type Description Default <code>u</code> <code>Vertex</code> <p>Vertex identifier.</p> required <p>Returns:</p> Type Description <code>int</code> <p>Number of outgoing edges from <code>u</code>.</p>"},{"location":"api/graph_numpy/","title":"Graph_numpy","text":"<p>NumPy-backed graph representation.</p>"},{"location":"api/graph_numpy/#ssspx.graph_numpy.NumpyGraph","title":"<code>NumpyGraph</code>  <code>dataclass</code>","text":"<p>Directed graph using NumPy arrays for adjacency lists.</p> <p>Negative weights are disallowed and will trigger :class:<code>~ssspx.exceptions.GraphFormatError</code> with the exact offending edge.</p>"},{"location":"api/graph_numpy/#ssspx.graph_numpy.NumpyGraph.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Validate initialization arguments and allocate adjacency storage.</p>"},{"location":"api/graph_numpy/#ssspx.graph_numpy.NumpyGraph.add_edge","title":"<code>add_edge(u, v, w)</code>","text":"<p>Add a directed edge from <code>u</code> to <code>v</code>.</p>"},{"location":"api/graph_numpy/#ssspx.graph_numpy.NumpyGraph.from_edges","title":"<code>from_edges(n, edges)</code>  <code>classmethod</code>","text":"<p>Construct a graph from an iterable of <code>(u, v, w)</code> edges.</p>"},{"location":"api/graph_numpy/#ssspx.graph_numpy.NumpyGraph.out_degree","title":"<code>out_degree(u)</code>","text":"<p>Return the out-degree of vertex <code>u</code>.</p>"},{"location":"api/graph_numpy/#ssspx.graph_numpy.NumpyGraph.to_graph","title":"<code>to_graph()</code>","text":"<p>Return a standard :class:<code>~ssspx.graph.Graph</code> copy of this graph.</p>"},{"location":"api/io/","title":"IO","text":"<p>Graph input/output helpers.</p>"},{"location":"api/io/#ssspx.io.load_graph","title":"<code>load_graph(path, fmt=None)</code>","text":"<p>Load a graph from the specified file path.</p> <p>This function is deprecated; use <code>read_graph</code> instead.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the graph file.</p> required <code>fmt</code> <code>Optional[str]</code> <p>The format of the graph file. Defaults to None.</p> <code>None</code> <p>Returns:</p> Type Description <code>Graph</code> <p>The loaded graph object.</p> Deprecated <p>Since version 0.1.0. Will be removed in version 0.2.0. Use <code>read_graph</code> instead.</p>"},{"location":"api/io/#ssspx.io.read_graph","title":"<code>read_graph(path, fmt=None)</code>","text":"<p>Read a graph from a file in the specified format.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the graph file.</p> required <code>fmt</code> <code>Optional[str]</code> <p>The format of the graph file. If None, the format is auto-detected.</p> <code>None</code> <p>Returns:</p> Type Description <code>Graph</code> <p>The graph object constructed from the file.</p> <p>Raises:</p> Type Description <code>GraphFormatError</code> <p>If the graph format is unknown or unsupported.</p>"},{"location":"api/io/#ssspx.io.write_graph","title":"<code>write_graph(G, path, fmt=None)</code>","text":"<p>Write a graph to a file in the specified format.</p> <p>Parameters:</p> Name Type Description Default <code>G</code> <code>Graph</code> <p>The graph object to be written.</p> required <code>path</code> <code>str</code> <p>The file path where the graph will be saved.</p> required <code>fmt</code> <code>Optional[str]</code> <p>The format to use for writing the graph. If None, the format is  auto-detected from the file extension.</p> <code>None</code> <p>Raises:</p> Type Description <code>GraphFormatError</code> <p>If the format is unknown or unsupported.</p>"},{"location":"api/logger/","title":"Logger","text":"<p>Lightweight logging helpers for optional structured output.</p>"},{"location":"api/logger/#ssspx.logger.Logger","title":"<code>Logger</code>","text":"<p>               Bases: <code>Protocol</code></p> <p>Protocol for minimal logger implementations.</p>"},{"location":"api/logger/#ssspx.logger.Logger.debug","title":"<code>debug(event, **fields)</code>","text":"<p>Emit a <code>DEBUG</code>-level event.</p>"},{"location":"api/logger/#ssspx.logger.Logger.info","title":"<code>info(event, **fields)</code>","text":"<p>Emit an <code>INFO</code>-level event.</p>"},{"location":"api/logger/#ssspx.logger.NoopLogger","title":"<code>NoopLogger</code>","text":"<p>Logger that discards all events.</p>"},{"location":"api/logger/#ssspx.logger.NoopLogger.debug","title":"<code>debug(event, **fields)</code>","text":"<p>Ignore a <code>DEBUG</code> event.</p>"},{"location":"api/logger/#ssspx.logger.NoopLogger.info","title":"<code>info(event, **fields)</code>","text":"<p>Ignore an <code>INFO</code> event.</p>"},{"location":"api/logger/#ssspx.logger.StdLogger","title":"<code>StdLogger</code>","text":"<p>Minimal logger with optional JSON output.</p>"},{"location":"api/logger/#ssspx.logger.StdLogger.__init__","title":"<code>__init__(level='warning', json_fmt=False, stream=None)</code>","text":"<p>Initialize the logger.</p>"},{"location":"api/logger/#ssspx.logger.StdLogger.debug","title":"<code>debug(event, **fields)</code>","text":"<p>Emit a <code>DEBUG</code> event.</p>"},{"location":"api/logger/#ssspx.logger.StdLogger.info","title":"<code>info(event, **fields)</code>","text":"<p>Emit an <code>INFO</code> event.</p>"},{"location":"api/logger/#ssspx.logger.StdLogger.log","title":"<code>log(level, event, **fields)</code>","text":"<p>Emit a log <code>event</code> at <code>level</code> with additional <code>fields</code>.</p>"},{"location":"api/path/","title":"Path","text":"<p>Utilities for reconstructing paths from predecessor arrays.</p>"},{"location":"api/path/#ssspx.path.compress_original_path_from_clones","title":"<code>compress_original_path_from_clones(clone_path, clone2orig)</code>","text":"<p>Map a clone-level path back to original vertices.</p> <p>Consecutive duplicates created by zero-weight cycles are removed.</p> <p>Parameters:</p> Name Type Description Default <code>clone_path</code> <code>Iterable[Vertex]</code> <p>Path expressed in the transformed (clone) graph.</p> required <code>clone2orig</code> <code>List[Vertex]</code> <p>Mapping from each clone identifier to its original vertex identifier.</p> required <p>Returns:</p> Type Description <code>List[Vertex]</code> <p>Path in the original graph with consecutive duplicates removed.</p>"},{"location":"api/path/#ssspx.path.reconstruct_path_basic","title":"<code>reconstruct_path_basic(predecessors, source, target)</code>","text":"<p>Return the path from <code>source</code> to <code>target</code> using a predecessor array.</p> <p>Parameters:</p> Name Type Description Default <code>predecessors</code> <code>List[Optional[Vertex]]</code> <p>Predecessor of each vertex or <code>None</code> if unknown or unreached.</p> required <code>source</code> <code>Vertex</code> <p>Source vertex identifier.</p> required <code>target</code> <code>Vertex</code> <p>Target vertex identifier.</p> required <p>Returns:</p> Type Description <code>List[Vertex]</code> <p>Vertices from source to target (inclusive). Returns an empty list if no</p> <code>List[Vertex]</code> <p>path exists.</p> Notes <p>Works for the non-transformed case (one-level graph). It is safe when <code>predecessors[source]</code> is <code>None</code> (root).</p>"},{"location":"api/profiling/","title":"Profiling","text":"<p>Lightweight helpers for optional cProfile integration.</p>"},{"location":"api/profiling/#ssspx.profiling.ProfileReport","title":"<code>ProfileReport</code>  <code>dataclass</code>","text":"<p>Summary of profiling statistics.</p>"},{"location":"api/profiling/#ssspx.profiling.ProfileReport.to_text","title":"<code>to_text(lines=20)</code>","text":"<p>Return a formatted statistics table.</p> <p>Parameters:</p> Name Type Description Default <code>lines</code> <code>int</code> <p>Number of rows from the profile to include.</p> <code>20</code> <p>Returns:</p> Type Description <code>str</code> <p>Human readable text report.</p>"},{"location":"api/profiling/#ssspx.profiling.ProfileSession","title":"<code>ProfileSession</code>","text":"<p>Context manager that records a profiling session using :mod:<code>cProfile</code>.</p>"},{"location":"api/profiling/#ssspx.profiling.ProfileSession.__enter__","title":"<code>__enter__()</code>","text":"<p>Start the profiling session.</p>"},{"location":"api/profiling/#ssspx.profiling.ProfileSession.__exit__","title":"<code>__exit__(exc_type, exc, tb)</code>","text":"<p>Stop profiling and finalize statistics.</p>"},{"location":"api/profiling/#ssspx.profiling.ProfileSession.__init__","title":"<code>__init__(dump_path=None)</code>","text":"<p>Initialize the profiling session.</p> <p>Parameters:</p> Name Type Description Default <code>dump_path</code> <code>Optional[str]</code> <p>Optional path where raw stats should be dumped when the session exits.</p> <code>None</code>"},{"location":"api/profiling/#ssspx.profiling.ProfileSession.report","title":"<code>report()</code>","text":"<p>Return profiling statistics collected so far.</p>"},{"location":"api/solver/","title":"Solver","text":"<p>Deterministic SSSP solver based on the BMSSP algorithm.</p>"},{"location":"api/solver/#ssspx.solver.SSSPResult","title":"<code>SSSPResult</code>  <code>dataclass</code>","text":"<p>Distances and predecessors produced by the solver.</p>"},{"location":"api/solver/#ssspx.solver.SSSPSolver","title":"<code>SSSPSolver</code>","text":"<p>Deterministic SSSP (directed, non-negative) with BMSSP-style recursion.</p>"},{"location":"api/solver/#ssspx.solver.SSSPSolver.__init__","title":"<code>__init__(G, source, config=None, logger=None, sources=None)</code>","text":"<p>Initialize the solver.</p> <p>Parameters:</p> Name Type Description Default <code>G</code> <code>Graph</code> <p>Input graph.</p> required <code>source</code> <code>Vertex</code> <p>Source vertex identifier.</p> required <code>config</code> <code>Optional[SolverConfig]</code> <p>Optional solver configuration.</p> <code>None</code> <code>sources</code> <code>Optional[List[Vertex]]</code> <p>Optional list of additional source vertices.</p> <code>None</code> <p>Raises:</p> Type Description <code>AlgorithmError</code> <p>If any provided source is not a valid vertex id.</p>"},{"location":"api/solver/#ssspx.solver.SSSPSolver.metrics","title":"<code>metrics(wall_ms, peak_mib=None)</code>","text":"<p>Return performance metrics for the most recent run.</p> <p>Parameters:</p> Name Type Description Default <code>wall_ms</code> <code>float</code> <p>Wall-clock time spent in :meth:<code>solve</code> in milliseconds.</p> required <code>peak_mib</code> <code>float | None</code> <p>Optional peak memory usage in MiB.</p> <code>None</code> <p>Returns:</p> Type Description <code>SolverMetrics</code> <p>A dataclass capturing run parameters and counter values.</p>"},{"location":"api/solver/#ssspx.solver.SSSPSolver.path","title":"<code>path(target_original)</code>","text":"<p>Return a path from the source to <code>target_original</code> in original ids.</p> <p>Parameters:</p> Name Type Description Default <code>target_original</code> <code>Vertex</code> <p>Target vertex identifier in the original graph.</p> required <p>Returns:</p> Type Description <code>List[Vertex]</code> <p>List of vertex ids from source to target (inclusive). Returns an</p> <code>List[Vertex]</code> <p>empty list if no path exists. <code>solve</code> must be called beforehand.</p>"},{"location":"api/solver/#ssspx.solver.SSSPSolver.solve","title":"<code>solve()</code>","text":"<p>Run the BMSSP algorithm and return distances and predecessors.</p>"},{"location":"api/solver/#ssspx.solver.SSSPSolver.summary","title":"<code>summary()</code>","text":"<p>Return a copy of internal counter values.</p>"},{"location":"api/solver/#ssspx.solver.SolverConfig","title":"<code>SolverConfig</code>  <code>dataclass</code>","text":"<p>Configuration knobs for the solver.</p> <p>Attributes:</p> Name Type Description <code>use_transform</code> <code>bool</code> <p>If <code>True</code>, apply the constant-outdegree transform internally.</p> <code>target_outdeg</code> <code>int</code> <p>Maximum out-degree after the transform (ignored when <code>use_transform</code> is <code>False</code>).</p> <code>frontier</code> <code>str</code> <p><code>\"block\"</code> (paper-style) or <code>\"heap\"</code> (baseline).</p> <code>k_t_auto</code> <code>bool</code> <p>If <code>True</code>, compute <code>(k, t)</code> from <code>n</code> as in the paper. If <code>False</code>, use the provided <code>k</code> and <code>t</code> values.</p> <code>k</code> <code>int</code> <p>Branching parameter when <code>k_t_auto</code> is <code>False</code>.</p> <code>t</code> <code>int</code> <p>Level depth parameter when <code>k_t_auto</code> is <code>False</code>.</p>"},{"location":"api/solver/#ssspx.solver.SolverMetrics","title":"<code>SolverMetrics</code>  <code>dataclass</code>","text":"<p>Performance metrics collected from a solver run.</p>"},{"location":"api/transform/","title":"Transform","text":"<p>Graph transformations used by the solver.</p>"},{"location":"api/transform/#ssspx.transform.constant_outdegree_transform","title":"<code>constant_outdegree_transform(G, delta)</code>","text":"<p>Split vertices so that every vertex has out-degree at most <code>delta</code>.</p> <p>The transformation replaces a vertex with a chain of clones. Each clone except the last holds <code>delta - 1</code> of the original outgoing edges and a zero-weight edge to the next clone. The last clone holds the remaining edges (at most <code>delta</code>). Incoming edges of a vertex are redirected to its first clone.</p> <p>Parameters:</p> Name Type Description Default <code>G</code> <code>Graph</code> <p>Original graph to transform.</p> required <code>delta</code> <code>int</code> <p>Maximum out-degree allowed for each vertex (<code>delta &gt; 0</code>).</p> required <p>Returns:</p> Type Description <code>Graph</code> <p>A tuple <code>(G2, mapping)</code> where <code>G2</code> is the transformed graph and</p> <code>Dict[Vertex, List[Vertex]]</code> <p><code>mapping</code> maps each original vertex id to a list of its clone ids in</p> <code>Tuple[Graph, Dict[Vertex, List[Vertex]]]</code> <p><code>G2</code>.</p> <p>Raises:</p> Type Description <code>ConfigError</code> <p>If <code>delta</code> is not positive.</p>"},{"location":"decisions/0001-block-frontier/","title":"ADR 0001: Choose Block Frontier","text":""},{"location":"decisions/0001-block-frontier/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"decisions/0001-block-frontier/#context","title":"Context","text":"<p>Selecting a frontier data structure affects memory locality and the cost of processing duplicate or stale entries. A block frontier groups vertices by distance buckets, whereas a binary heap orders every push individually.</p>"},{"location":"decisions/0001-block-frontier/#decision","title":"Decision","text":"<p>Use a block frontier as the default implementation. Keep a heap frontier as a simpler baseline and for debugging.</p>"},{"location":"decisions/0001-block-frontier/#consequences","title":"Consequences","text":"<p>The block frontier improves cache behaviour and reduces priority\u2011queue churn but requires more bookkeeping and is tuned for non\u2011negative weights.</p>"},{"location":"decisions/0002-transform-tradeoffs/","title":"ADR 0002: Constant Out-degree Transform","text":""},{"location":"decisions/0002-transform-tradeoffs/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"decisions/0002-transform-tradeoffs/#context","title":"Context","text":"<p>Vertices with very high out-degree slow frontier operations. The BMSSP transform clones such vertices to cap the out-degree by a configurable value.</p>"},{"location":"decisions/0002-transform-tradeoffs/#decision","title":"Decision","text":"<p>Provide an optional transform (enabled via <code>use_transform</code>) that enforces a bound on out-degree. The cap defaults to four but can be tuned per run.</p>"},{"location":"decisions/0002-transform-tradeoffs/#consequences","title":"Consequences","text":"<p>The transform increases the number of vertices and edges, which can raise memory usage and complicate path reconstruction. However, it enables predictable frontier performance on graphs with skewed degree distributions.</p>"},{"location":"decisions/0003-equality-relax/","title":"ADR 0003: Equality Relaxation","text":""},{"location":"decisions/0003-equality-relax/#status","title":"Status","text":"<p>Accepted</p>"},{"location":"decisions/0003-equality-relax/#context","title":"Context","text":"<p>Floating\u2011point distances can tie due to rounding. Using a strict <code>&lt;</code> comparison when relaxing edges risks missing alternative shortest paths or producing nondeterministic results.</p>"},{"location":"decisions/0003-equality-relax/#decision","title":"Decision","text":"<p>Relax edges with <code>&lt;=</code> instead of <code>&lt;</code> and treat equal distances as valid updates. This ensures all minimal parents are captured when reconstructing the shortest path DAG.</p>"},{"location":"decisions/0003-equality-relax/#consequences","title":"Consequences","text":"<p>More than one predecessor may be stored for a vertex, slightly increasing memory usage, but distances remain correct and stable across platforms.</p>"},{"location":"design/bmssp/","title":"BMSSP Design","text":"<p><code>ssspx</code> implements a divide\u2011and\u2011conquer algorithm inspired by Balanced Multi\u2011source Shortest Paths (BMSSP). This page sketches the major moving parts and the trade\u2011offs that shaped the implementation.</p>"},{"location":"design/bmssp/#levels","title":"Levels","text":"<p>The solver proceeds in levels. Each level handles a subproblem consisting of the current frontier and the yet\u2011unsettled vertices. Work is split across levels until the number of unexplored edges falls below a configured bound.</p>"},{"location":"design/bmssp/#findpivots","title":"<code>FindPivots</code>","text":"<p>At every level the solver executes <code>FindPivots</code> to choose a set of pivot vertices. Pivots partition the graph so that each subproblem contains roughly half the remaining edges. The block frontier supplies candidates in order of non\u2011decreasing tentative distance.</p>"},{"location":"design/bmssp/#base-case","title":"Base case","text":"<p>Once a level contains fewer than the edge threshold the solver switches to a plain Dijkstra scan. This base case guarantees progress even on adversarial inputs and keeps the recursion shallow.</p>"},{"location":"design/bmssp/#frontier-semantics","title":"Frontier semantics","text":"<p>Two interchangeable frontiers exist:</p> <ul> <li>block \u2013 groups vertices by distance range, reducing priority queue   churn and improving cache locality. This is the default for performance.</li> <li>heap \u2013 a classic binary heap used mainly as a reference   implementation.</li> </ul> <p>Both frontiers operate on a non\u2011negative metric and can skip stale entries.</p>"},{"location":"design/bmssp/#call-graph","title":"Call graph","text":"<pre><code>graph TD\n  CLI --&gt; Solver\n  Solver --&gt; FindPivots\n  Solver --&gt; Frontier\n  Solver --&gt; BaseCase</code></pre>"},{"location":"design/bmssp/#data-flow","title":"Data flow","text":"<pre><code>flowchart LR\n  Edges[(Input edges)] --&gt; Transform\n  Transform --&gt; Solver\n  Solver --&gt; Distances[\"Distances &amp; paths\"]</code></pre> <p>The optional transform clones high\u2011degree vertices to bound out\u2011degree, which in turn feeds the solver. Results include both distances and path reconstruction metadata.</p>"},{"location":"howto/benchmarks/","title":"Benchmarking","text":"<p>The <code>ssspx.bench</code> module provides micro-benchmarks comparing the solver against a plain Dijkstra implementation. It is optional and not executed in CI but can help track performance locally.</p> <p>Run benchmarks across multiple graph sizes and trials and write per-trial results to a CSV file. If no sizes are provided, a small demo <code>10,20</code> and <code>20,40</code> is used by default:</p> <pre><code>python -m ssspx.bench --trials 5 --sizes 1000,5000 2000,10000 --out-csv out.csv\n</code></pre> <p>Each size pair <code>n,m</code> is tested for both frontier implementations and with and without the outdegree transform. The command prints a summary table with median and 95th percentile timings along with internal solver counters (<code>edges</code>, <code>pulls</code>, <code>fp_rounds</code>, <code>bc_pops</code>). Individual measurements including these counters and wall-clock timings are written to the specified CSV file. Use <code>--seed-base</code> to control random graph generation.</p> <p>Pass <code>--mem</code> to enable a lightweight tracemalloc profiler that records peak memory usage in MiB. When enabled, a <code>peak_mib</code> column is added to the CSV and median and 95th percentile memory statistics are printed in the summary table.</p>"},{"location":"howto/export/","title":"Exporting Results","text":""},{"location":"howto/export/#json","title":"JSON","text":"<pre><code>ssspx --edges graph.mtx --export-json out.json\n</code></pre>"},{"location":"howto/export/#graphml","title":"GraphML","text":"<p><pre><code>ssspx --edges graph.jsonl --export-graphml out.graphml\n\nUse ``--format`` to override if the input lacks an extension:\n\n```bash\nssspx --edges graph --format csv --export-json out.json\n</code></pre> ```</p>"},{"location":"howto/publish/","title":"Publishing","text":""},{"location":"howto/publish/#pypi","title":"PyPI","text":"<p>Tagged releases trigger CI to build source and binary wheels. To publish manually:</p> <pre><code>poetry build\npoetry run twine check dist/*\npoetry publish # or twine upload dist/*\n</code></pre> <p>Semantic-release automates version bumps and GitHub Releases. Configure a PyPI token in the <code>PYPI_TOKEN</code> secret and enable the release workflow.</p>"},{"location":"howto/publish/#conda-forge","title":"conda-forge","text":"<p>A starter recipe lives under <code>conda/meta.yaml</code>. After a PyPI release:</p> <ol> <li>Fork conda-forge/staged-recipes.</li> <li>Copy <code>conda/meta.yaml</code> into <code>recipes/ssspx/meta.yaml</code> and submit a pull request.</li> <li>Once merged, a dedicated <code>ssspx-feedstock</code> repository will be created where future    updates are managed via version bumps in the recipe.</li> </ol> <p>Refer to the conda-forge docs for detailed instructions and review guidelines.</p>"},{"location":"policy/api/","title":"API stability policy","text":"<p><code>ssspx</code> follows semantic versioning with a major version of <code>0</code>, meaning that public APIs may change at each minor release.  To minimize surprises, we document which modules and classes are considered public and covered by our compatibility guarantees.</p>"},{"location":"policy/api/#public-surface","title":"Public surface","text":"<p>The following modules are public:</p> <ul> <li><code>ssspx.graph</code></li> <li><code>ssspx.graph_numpy</code></li> <li><code>ssspx.solver</code></li> <li><code>ssspx.transform</code></li> <li><code>ssspx.io</code></li> <li><code>ssspx.export</code></li> <li><code>ssspx.frontier</code></li> <li><code>ssspx.logger</code></li> <li><code>ssspx.exceptions</code></li> </ul> <p>Only objects re-exported from :mod:<code>ssspx.__init__</code> via <code>__all__</code> are part of the stable API.  Everything else should be treated as private and may change without notice.</p>"},{"location":"policy/api/#deprecations","title":"Deprecations","text":"<p>When public APIs change, the old names are kept for at least one minor release and emit a :class:<code>DeprecationWarning</code>.  Warnings include the version when the name was deprecated and the release in which it will be removed.  See :func:<code>ssspx.deprecation.warn_once</code> for details.</p> <p>Code that relies on deprecated names should migrate before the <code>remove_in</code> version.  Our CI checks fail if a deprecation past its <code>remove_in</code> version remains in the codebase.</p>"},{"location":"policy/dependencies/","title":"Dependency policy","text":"<p>We pin minimum versions in <code>pyproject.toml</code> so that users know the oldest supported release of each dependency. Upper version caps are avoided unless a new major release is known to break compatibility.</p> <p>Dependencies are refreshed automatically once a week. A scheduled workflow runs <code>pre-commit autoupdate</code> and <code>poetry update</code> and opens a pull request labeled <code>deps</code>. The full test suite and documentation build run on that pull request to ensure updates do not break the project.</p> <p>If a dependency introduces a breaking change, constrain the upper bound minimally and file an issue to track removing the cap.</p>"},{"location":"tutorials/quickstart/","title":"Quickstart","text":""},{"location":"tutorials/quickstart/#python","title":"Python","text":"<pre><code>&gt;&gt;&gt; from ssspx.io import read_graph\n&gt;&gt;&gt; from ssspx import SSSPSolver, SolverConfig\n&gt;&gt;&gt; G = read_graph(\"docs/examples/small.csv\")\n&gt;&gt;&gt; solver = SSSPSolver(G, 0, config=SolverConfig())\n&gt;&gt;&gt; solver.solve().distances\n[0.0, 1.0, 3.0, 4.0]\n</code></pre>"},{"location":"tutorials/quickstart/#cli","title":"CLI","text":"<pre><code>ssspx --edges docs/examples/small.csv --source 0\n\n# formats: .csv, .jsonl, .mtx, .graphml (auto-detected)\nssspx --edges path/to/graph.mtx --source 0\n\n# Structured logging with counters\nssspx --random --n 10 --m 20 --log-json\n\n# Reproducible random graph\nssspx --random --n 10 --m 20 --seed 123\n</code></pre>"}]}